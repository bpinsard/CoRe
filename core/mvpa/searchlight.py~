

from mvpa2.support.nibabel.surf import Surface
from mvpa2.misc.surfing.queryengine import SurfaceQueryEngine
from mvpa2.generators.partition import HalfPartitioner, NFoldPartitioner, CustomPartitioner
from mvpa2.generators.resampling import NonContiguous
from mvpa2.measures.searchlight import Searchlight, sphere_searchlight
from mvpa2.measures.base import CrossValidation
from mvpa2.measures.gnbsearchlight import GNBSearchlight, sphere_gnbsearchlight
from mvpa2.base.node import ChainNode
from mvpa2.datasets import Dataset, hstack
from mvpa2.base.hdf5 import h5load
from mvpa2.generators.resampling import Balancer
from mvpa2.mappers.fx import mean_sample
from mvpa2.clfs.gnb import GNB
from mvpa2.clfs.transerror import Confusion
from mvpa2.base.node import Node
from mvpa2.generators.splitters import Splitter
from mvpa2.clfs.transerror import ConfusionMatrixError, ConfusionMatrix
from mvpa2 import debug
if __debug__:
    debug.active += ["SLC"]

prtnr_loco_cv = ChainNode([
        NFoldPartitioner(attr='chunks'), 
        NonContiguous(dist_attr='time',dist=60)])
prtnr_loso_cv = NFoldPartitioner(attr='scan_id')

prtnr_mvpa2_retest = CustomPartitioner(
    [(['d3_mvpa1'],['d3_retest_TSeq','d3_retest_IntSeq','d3_resting1','d3_resting2']),
     (['d3_mvpa2'],['d3_retest_TSeq','d3_retest_IntSeq','d3_resting1','d3_resting2']),
     (['d3_mvpa1','d3_mvpa2'],['d3_retest_TSeq','d3_retest_IntSeq','d3_resting1','d3_resting2']),
     ], attr='scan_name')

class SurfVoxSearchlight():
    
    def __init__(self, ds, clf, prtnr=prtnr_loco_cv):
        self.prtnr = prtnr
        self.slght_surf_accuracy, self.slght_vox_accuracy = SurfVoxSearchlight._setup_surf_vox_searchlight(ds, clf, prtnr)

    @staticmethod
    def _setup_surf_vox_searchlight(ds, clf, prtnr):

        lrh_surf = Surface(
            ds.fa.coordinates[:2*32492],
            ds.a.triangles)
        
        spltr = Splitter(attr='partitions',attr_values=[1,2])        


    def __call__(self, ds):
        slmap_surf_accuracy = self.slght_surf_accuracy(ds[:,:2*32492])
        slmap_vox_accuracy = self.slght_vox_accuracy(ds[:,2*32492:])
        
        slmap_accuracy = hstack([slmap_surf_accuracy, slmap_vox_accuracy])
        slmap_accuracy.fa = ds.fa
        return slmap_accuracy

class GNBSurfVoxSearchlight(SurfVoxSearchlight):

    @staticmethod
    def _setup_surf_vox_searchlight(ds, clf, prtnr):

        lrh_surf = Surface(
            ds.fa.coordinates[:2*32492],
            ds.a.triangles)
        
        spltr = Splitter(attr='partitions',attr_values=[1,2])
        
        sqe = SurfaceQueryEngine(
            lrh_surf,
            radius=20,
            max_feat=64)

        slght_surf_accuracy = GNBSearchlight(
            clf,
            prtnr,
            sqe,
            splitter=spltr,
            postproc=mean_sample(),
            reuse_neighbors=True)

        slght_vox_accuracy = sphere_gnbsearchlight(
            clf,
            prtnr,
            splitter=spltr,
            radius=2.5,
            space='voxel_indices',
            postproc=mean_sample(),
            reuse_neighbors=True)
        return slght_surf_accuracy, slght_vox_accuracy


def searchlight_delays(ds, prtnr):
    surf_vox_slght = SurfVoxSearchlight(ds, prtnr)
    start = -2
    end = 22
    delays = range(start, end)
    slmaps = []
    for d in delays:
        print '######## computing searchlight for delay %d #######'%d
        delay_ds = ds[ds.a.blocks_tr+d]
        delay_ds.targets = ds.a.blocks_targets
        delay_ds.chunks = np.arange(delay_ds.nsamples)
        slmap = surf_vox_slght(delay_ds)
        print '$$$$ delay %d : max accuracy %f'%(d, 1-slmap.samples.min())
        slmaps.append(slmap)
        del delay_ds
    slmap = mvpa2.datasets.vstack(slmaps)
    slmap.sa['delays'] = delays
    del slmaps
    return slmap

def all_searchlights(ds, prtnr=prtnr_loco_cv, surf_vox_slght=None):
    slmaps = dict()

    if surf_vox_slght is None:
        surf_vox_slght = SurfVoxSearchlight(ds, prtnr)
    slmaps['all'] = surf_vox_slght(ds)
    slmaps['norest'] = surf_vox_slght(ds[ds.sa.targets!='rest'])
    slmaps['instr'] = surf_vox_slght(ds[ds.sa.subtargets=='instr'])
    slmaps['exec'] = surf_vox_slght(ds[ds.sa.subtargets=='exec'])
    
    return slmaps

